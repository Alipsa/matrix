import java.security.MessageDigest

plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    // id("se.alipsa.nexus-release-plugin") version "1.0.1"
    id("se.alipsa.nexus-release-plugin") version '2.0.0-SNAPSHOT'
}

group = 'se.alipsa.matrix'
version = '0.3.1-SNAPSHOT'
description = "Groovy library for importing and exporting to and from Google BigQuery to a Matrix"

ext.releaseNexusUrl = version.toString().endsWith("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

JavaCompile javaCompile = compileJava {
    options.release = 21
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
    options.deprecation = true
}

repositories {
    if (version.toString().endsWith('SNAPSHOT')) {
        mavenLocal()
    }
    mavenCentral()
}

dependencies {
    //if (version.endsWith('SNAPSHOT')) {
        compileOnly project(':matrix-core')
        testImplementation project(':matrix-core')
        testImplementation project(':matrix-datasets')
    /*} else {
        compileOnly('se.alipsa.matrix:matrix-core:2.2.0')
        testImplementation('se.alipsa.matrix:matrix-core:2.2.0')
        testImplementation('se.alipsa.matrix:matrix-datasets:1.1.0')
    }*/
    compileOnly libs.groovy

    api('com.google.cloud:google-cloud-bigquery:2.51.0')
    api 'com.google.cloud:google-cloud-resourcemanager:1.68.0'
    implementation platform('com.google.auth:google-auth-library-bom:1.37.1')
    implementation 'com.google.auth:google-auth-library-oauth2-http'
    implementation('com.google.cloud:google-cloud-bigquerystorage:3.15.2')

    testImplementation libs.groovy
    testImplementation testLibs.junitJupiterApi
    testRuntimeOnly testLibs.junitJupiterEngine
    testRuntimeOnly testLibs.junitPlatformLauncher
}

test {
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}
//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('javadoc')
    from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Matrix Json'
                description = "${project.description}"
                url = "https://github.com/Alipsa/matrix/matrix-bigquery"
                properties = [
                    'maven.compiler.release': "${javaCompile.options.release.get()}"
                ]
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-bigquery/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/Alipsa/matrix/matrix-bigquery/tree/master'
                    connection = 'scm:git:https://github.com/Alipsa/matrix.git'
                    developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
                }
            }
        }
    }
    if (project.ext.properties.sonatypeUsername) {
        repositories {
            maven {
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
                url = releaseNexusUrl
            }
        }
    }
}

signing {
    if (project.properties['signing.keyId'] != null) {
        project.logger.lifecycle("Signing artifacts...")
        sign publishing.publications.maven
    } else {
        project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
    }
}
def generateChecksum(File file, String algo) {
    def digest = MessageDigest.getInstance(algo)
    file.withInputStream { is -> digest.update(is.bytes) }
    def hash = digest.digest().encodeHex().toString()
    String extension = algo.toLowerCase().replace('-', '')
    def checksumFile = new File("${file.absolutePath}.${extension}")
    checksumFile.text = hash
    println "Generated ${algo} for ${file.name} â†’ ${checksumFile.name}"
}

tasks.withType(Sign).configureEach { signTask ->
    doLast {
        signTask.signatureFiles.each { ascFile ->
            def originalFile = new File(ascFile.absolutePath - '.asc')
            if (originalFile.exists()) {
                ['MD5', 'SHA-1'].each { algo ->
                    generateChecksum(originalFile, algo)
                }
            }
        }
    }
}

nexusReleasePlugin {
    nexusUrl = releaseNexusUrl
    userName = project.ext.properties.sonatypeUsername
    password = project.ext.properties.sonatypePassword
    mavenPublication = publishing.publications.maven
}