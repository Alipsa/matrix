# Whiskey Analysis

## Basic Information
```{groovy}
@Grab('se.alipsa.matrix:matrix-csv')
@Grab('se.alipsa.matrix:matrix-stats')
import se.alipsa.matrix.core.*
import se.alipsa.matrix.csv.*
import se.alipsa.matrix.stats.Correlation
import se.alipsa.matrix.xchart.*

m = CsvImporter.importCsv('https://www.niss.org/sites/default/files/ScotchWhisky01.txt')
    .dropColumns('RowID')
out.println "Dimensions: " + m.dimensions()

```
<br /> 

## Fruity and sweet whiskeys

```{groovy}
features = m.columnNames() - 'Distillery'
size = features.size()
features.each(feature -> m.apply(feature) { it.toDouble() / 4 })

selected= m.subset{ it.Fruity > 0.5 && it.Sweetness > 0.5 }

out.println selected.dimensions()
out.println selected, [width: '50%']

```
<br /> 

## Aberlour 

```{groovy}
import se.alipsa.matrix.xchart.*

transparency = 80
def aberlour = selected.subset(0..0)
def rc = RadarChart.create(aberlour, 600, 500)
    .setTitle('aberlour')
    .addSeries('Distillery', transparency)
out.println rc
```

## Distilleries
```{groovy}
import se.alipsa.matrix.xchart.*

rc = RadarChart.create(selected, 680, 500)
    .setTitle("Distilleries")
    .addSeries('Distillery', transparency)
out.println rc
```

## Cluster analysis
```{groovy}
@Grab('com.github.haifengl:smile-core:4.3.0')
@Grab('com.github.haifengl:smile-plot:4.3.0')
@Grab(group='org.bytedeco', module='openblas', version='0.3.28-1.5.11')
@Grab(group='org.bytedeco', module='javacpp', version='1.5.11')

import smile.clustering.KMeans
import se.alipsa.matrix.core.*

def iterations = 20
data = m.selectColumns(features) as double[][]

def model = KMeans.fit(data,3, iterations)
m['Cluster'] = model.group().toList()

def result = GQ {
  from w in m
  groupby w.Cluster
  orderby w.Cluster
  select w.Cluster, count(w.Cluster) as Count
}
out.println "Cluster allocation using GQ"
out.println Matrix.builder('Cluster allocation').ginqResult(result).build(), [width: '20%']

out.println "Cluster allocation using countBy"
out.println m.rows().countBy{ it.Cluster }

Map<?, Matrix> whiskeyClusters = m.split('Cluster')

whiskeyClusters.each {
  out.println ' '
  out.print "**Cluster $it.key:** "
  out.println it.value.Distillery
}

import smile.feature.extraction.PCA
import se.alipsa.matrix.xchart.*

def pca = PCA.fit(data)
def projected = pca.getProjection(2).apply(data)

m['X'] = projected*.getAt(0)
m['Y'] = projected*.getAt(1)

def clusters = m['Cluster'].toSet()
def sc = ScatterChart.create(m, 700, 500)
sc.title = 'Whisky Flavor Clusters'
for (i in clusters) {
  def series = m.subset('Cluster', i)
  sc.addSeries("Cluster $i", series.column('X'), series.column('Y'))
}

out.println sc
```
## Correlation Heatmap
```{groovy}
import se.alipsa.matrix.core.*
import se.alipsa.matrix.stats.*
import se.alipsa.matrix.xchart.*

def corr = [size<..0, 0..<size].combinations().collect { i, j ->
  Correlation.cor(data*.getAt(j), data*.getAt(i)) * 100 as int
}

def corrMatrix = Matrix.builder().data(X: 0..<corr.size(), Heat: corr)
    .types([Number] * 2)
    .matrixName('Heatmap')
    .build()

def hc = HeatmapChart.create(corrMatrix, 820, 500)
    .addSeries('Heat Series', features.reverse(), features,
        corrMatrix.column('Heat').collate(size))

out.println hc
```