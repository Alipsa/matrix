plugins {
  id 'groovy'
  id 'java-library'
  id 'signing'
  id 'maven-publish'
  id "com.github.ben-manes.versions" version "0.47.0"
}

group 'se.alipsa.groovy'
version '1.2.1'
description = "Groovy library for working with matrix ([][] data)"

ext.nexusUrl = version.contains("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  def groovyVersion = '4.0.15'
  def groovy = "org.apache.groovy:groovy:$groovyVersion"
  compileOnly groovy
  //compileOnly "org.apache.groovy:groovy-ginq:$groovyVersion"
  testImplementation groovy
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
  testImplementation 'org.apache.commons:commons-math3:3.6.1'
  testImplementation 'com.h2database:h2:2.2.220'
  testImplementation "org.apache.groovy:groovy-sql:$groovyVersion"
  //testImplementation "org.apache.groovy:groovy-ginq:$groovyVersion"
}

test {
  testLogging.showStandardStreams = true
  useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set 'javadoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set 'sources'
  from sourceSets.main.allSource
}


//Maven Central uploads
publishing {
  publications {
    maven(MavenPublication) {
      from components.java

      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Matrix Core'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-core/main/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix/matrix-core/tree/main'
          connection = 'scm:git:https://github.com/Alipsa/matrix.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
        url = nexusUrl
      }
    }
  }
  logger.lifecycle("Log in to https://oss.sonatype.org/index.htm to release the deployment")
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
    //sign configurations.archives
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}
// TODO: add code to "Release" the published build, see https://github.com/sonatype/nexus-book-examples/blob/master/gradle/simple-project-staging/build.gradle
//   and https://github.com/sonatype/nexus-ant-tasks/tree/master/nexus-staging-ant-tasks

interface NexusReleasePluginExtension {
  Property<String> getNexusUrl()
  Property<String> getUserName()
  Property<String> getPassword()
}

class NexusReleasePlugin implements Plugin<Project> {

  // RESt documentation is here: https://oss.sonatype.org/nexus-staging-plugin/default/docs/rest.html
  static final String APPLICATION_JSON = 'application/json'
  //static final String APPLICATION_XML = 'application/xml'
  static final String BODY = 'body'
  static final String RESPONSE_CODE = 'responseCode'
  static final String HEADERS = 'headers'

  void apply(Project project) {
    def extension = project.extensions.create('nexusReleasePlugin', NexusReleasePluginExtension)
    project.task('release') {
      dependsOn(project.tasks.named('publishMavenPublicationToMavenRepository'))
      if (project.version.endsWith("-SNAPSHOT")) {
        println("NexusReleasePlugin: A snapshot cannot be released, publish is enough (or maybe you forgot to change the version?")
        return
       }
      doLast {
        String profileId = findStagingProfileId(
            String.valueOf(project.group),
            extension.nexusUrl.getOrNull(),
            extension.userName.getOrNull(),
            extension.password.getOrNull()
        )
        println "Hello from the NexusReleasePlugin, profileId = $profileId"
        String stagingRepoId = findStagingRepositoryId(
                profileId,
                extension.nexusUrl.getOrNull(),
                extension.userName.getOrNull(),
                extension.password.getOrNull()
        )
        println "NexusReleasePlugin, stagingRepoId = $stagingRepoId"
        Map<String, Object> closeResponse = closeStagingRepository(
            stagingRepoId,
            profileId,
            extension.nexusUrl.getOrNull(),
            extension.userName.getOrNull(),
            extension.password.getOrNull(),
            project
        )
        println "Close request result = ${closeResponse[RESPONSE_CODE]}, body = ${closeResponse[BODY]}"

        Map<String, Object> promoteResponse = promoteStagingRepository(
            stagingRepoId,
            profileId,
            extension.nexusUrl.getOrNull(),
            extension.userName.getOrNull(),
            extension.password.getOrNull()
        )
        println "Promote request result = ${promoteResponse[RESPONSE_CODE]}, body = ${promoteResponse[BODY]}"

        Map<String, Object> dropResponse = dropStagingRepository(
                stagingRepoId,
                profileId,
                extension.nexusUrl.getOrNull(),
                extension.userName.getOrNull(),
                extension.password.getOrNull()
        )
        println "Drop request result = ${dropResponse[RESPONSE_CODE]}, body = ${dropResponse[BODY]}"
      }
    }
  }

  static String findStagingProfileId(String groupName, String url, String userName, String password) {
    //println("Searching for a match for $groupName")
    if (url == null) {
      println("nexusUrl is not set cannot continue")
      return null
    }
    Map<String, Object> response = get("${baseUrl(url)}/service/local/staging/profiles", userName, password)

    String body = response[BODY]
    def stagingProfiles = new groovy.json.JsonSlurper().parseText(body)
    // First try exact match
    def profile = stagingProfiles.data.find { stagingProfile ->
      groupName == stagingProfile.name
    }
    // If that didnt work, look for something similar enough instead
    if (profile == null || profile == '') {
      Collection profiles = stagingProfiles.data.findAll { stagingProfile ->
        groupName.startsWith(stagingProfile.name)
      }
      profile = profiles[0]
      if (profiles.size() > 1) {
        // Not sure what to do here, maybe fail and require configuration to be set
        println "multiple profiles matching $groupName found, picking $profile.name"
      }
    }
    if (profile == null) {
      System.err.println("Failed to find a matching profile")
    }
    return profile.id
  }

  static String findStagingRepositoryId(String profileId, String url, String userName, String password) {
    //https://oss.sonatype.org/service/local/staging/profile_repositories
    Map<String, String> response = get("${baseUrl(url)}/service/local/staging/profile_repositories", userName, password)
    String body = response[BODY]
    def stagingRepos = new groovy.json.JsonSlurper().parseText(body)

    def repo = null
    stagingRepos.data.each { stageRepo ->
      if (profileId == stageRepo.profileId) {
        if (repo == null && stageRepo.type == 'open') {
          repo = stageRepo
        }
        if (stageRepo.type == 'open' && java.time.Instant.parse(repo.created) > java.time.Instant.parse(stageRepo.created)) {
          repo = stageRepo
        }
      }
    }
    return repo?.repositoryId
  }

  static Map<String, Object> closeStagingRepository(String stagingRepoId, String profileId, String publishUrl,
                                                    String userName, String password, Project project) {
    // /service/local/staging/profiles/<profile-id>/finish
    String url = "${baseUrl(publishUrl)}/service/local/staging/profiles/$profileId/finish"
    String payload = """<promoteRequest>
      <data>
          <stagedRepositoryId>${stagingRepoId}</stagedRepositoryId>
          <description>${project.group}:${project.name} closed by nexus release plugin</description>
      </data>
    </promoteRequest>"""
    payload = """{
      "data":{
        "stagedRepositoryId":"${stagingRepoId}",
        "description":"${project.group}:${project.name} closed by nexus release plugin"
      }
    }"""
    return post(url, payload, userName, password)
  }

  Map<String, Object> promoteStagingRepository(String stagingRepoId, String profileId, String publishUrl,
                                               String userName, String password) {
    // /staging/bulk/promote
    String url = "${baseUrl(publishUrl)}/service/local/staging/profiles/$profileId/promote"
    String payload = """{
      "data":{
        "stagedRepositoryId":"${stagingRepoId}",
        "description":"${project.group}:${project.name} promoted by nexus release plugin"
      }
    }"""
    return post(url, payload, userName, password)
  }

  Map<String, Object> dropStagingRepository(String stagingRepoId, String profileId, String publishUrl,
                                            String userName, String password) {
    // /staging/bulk/promote
    String url = "${baseUrl(publishUrl)}/service/local/staging/profiles/$profileId/drop"
    String payload = """{
      "data":{
        "stagedRepositoryId":"${stagingRepoId}",
        "description":"${project.group}:${project.name} dropped by nexus release plugin"
      }
    }"""
    return post(url, payload, userName, password)
  }

  static Map<String, Object> get(String urlString, String username, String password) {
    StringBuilder writer = new StringBuilder()
    URL url = new URL(urlString)
    HttpURLConnection conn = (HttpURLConnection) url.openConnection()
    conn.setRequestMethod("GET")
    conn.setRequestProperty("Accept", APPLICATION_JSON)
    conn.setRequestProperty("Authorization", basicAuth(username, password))
    conn.connect()
    int responseCode = conn.getResponseCode();
    var responseHeaders = conn.getHeaderFields();
    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line = br.readLine()) != null) {
      writer.append(line).append('\n');
    }
    conn.disconnect();
    return [(BODY): writer.toString(), (RESPONSE_CODE): responseCode, (HEADERS): responseHeaders]
  }

  static Map<String, Object> post(String urlString, String payload, String username, String password) {
    StringBuilder writer = new StringBuilder()
    URL url = new URL(urlString)
    HttpURLConnection conn = (HttpURLConnection) url.openConnection()
    conn.setRequestMethod('POST')
    conn.setRequestProperty('Content-Type', APPLICATION_JSON)
    conn.setRequestProperty("Accept", APPLICATION_JSON)
    conn.setRequestProperty("Authorization", basicAuth(username, password))
    conn.setDoOutput(true)
    conn.connect()
    OutputStream os = conn.getOutputStream();
    os.write(payload.getBytes())
    os.flush()
    os.close()
    int responseCode = conn.getResponseCode()
    var responseHeaders = conn.getHeaderFields()
    InputStream is = null
    try {
      is = conn.getInputStream()
    } catch (IOException e) {
      // no content
    }
    if (is != null) {
      BufferedReader br = new BufferedReader(new InputStreamReader(is))

      String line
      while ((line = br.readLine()) != null) {
        writer.append(line).append('\n')
      }
      is.close()
    }
    conn.disconnect()
    return [(BODY): writer.toString(), (RESPONSE_CODE): responseCode, (HEADERS): responseHeaders]
  }

  static String basicAuth(String username, String password) {
    return "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes())
  }

  static String baseUrl(String url) {
    URL publishUrl = new URL(url)
    String protocol = publishUrl.getProtocol()
    String host = publishUrl.getHost()
    String port = publishUrl.getPort() == -1 ? "" : ":${publishUrl.getPort()}"
    return "$protocol://$host$port"
  }
}
if (project.ext.properties.sonatypeUsername) {
  apply plugin: NexusReleasePlugin
  nexusReleasePlugin.nexusUrl = nexusUrl
  nexusReleasePlugin.userName = sonatypeUsername
  nexusReleasePlugin.password = sonatypePassword
}