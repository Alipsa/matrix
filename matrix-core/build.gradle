import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import java.util.concurrent.TimeUnit

plugins {
  id('groovy')
  id('java-library')
  id('signing')
  id('maven-publish')
  id("se.alipsa.nexus-release-plugin") version "1.0.1"
}

group = 'se.alipsa.matrix'
version = '3.1.0-SNAPSHOT'
description = "Groovy library for working with matrix ([][] data)"

ext.nexusUrl = version.contains("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

compileJava {
  options.release = 21
  options.deprecation = true
  options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
  options.deprecation = true
}

repositories {
  mavenCentral()
  if (version.endsWith('SNAPSHOT')) {
    mavenLocal()
  }
}

sourceSets {
  main {
    java { srcDirs = [] }    // no source dirs for the java compiler
    groovy { srcDirs = ["src/main/java", "src/main/groovy"] }  // compile   everything in src/ with groovy
  }
}

dependencies {
  compileOnly libs.groovy
  testImplementation libs.groovy
  testImplementation testLibs.junitJupiterApi
  testRuntimeOnly testLibs.junitJupiterEngine
  testRuntimeOnly testLibs.junitPlatformLauncher
  testImplementation 'org.apache.commons:commons-math3:3.6.1'
  testImplementation 'com.h2database:h2:2.3.232'
  testImplementation libs.groovySql
  testImplementation libs.groovyGinq
  //testImplementation libs.groovyJson
}

test {
  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.FAILED,
        TestLogEvent.PASSED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_OUT
    exceptionFormat = TestExceptionFormat.FULL
    showExceptions = true
    showCauses = true
    showStackTraces = true
    showStandardStreams = true

    // set options for log level DEBUG and INFO
    debug {
      events TestLogEvent.STARTED,
          TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_ERROR,
          TestLogEvent.STANDARD_OUT
      exceptionFormat = TestExceptionFormat.FULL
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      def duration = result.endTime - result.startTime
      println "Duration of $desc: $duration ms"
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}


tasks.register('javadocJar', Jar) {
  dependsOn groovydoc
  archiveClassifier.set 'javadoc'
  from groovydoc.destinationDir
}


tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier.set 'sources'
  from sourceSets.main.allSource
}


//Maven Central uploads
publishing {
  publications {
    maven(MavenPublication) {
      from components.java

      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Matrix Core'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix/main/matrix-core/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix/tree/main/matrix-core'
          connection = 'scm:git:https://github.com/Alipsa/matrix.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
        url = nexusUrl
      }
    }
  }
  //logger.lifecycle("Log in to https://oss.sonatype.org/index.htm to release the deployment")
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
    //sign configurations.archives
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

if (project.ext.properties.sonatypeUsername) {

  apply plugin: 'se.alipsa.nexus-release-plugin'
  //apply plugin: 'se.alipsa.groovy.NexusReleasePlugin'
  nexusReleasePlugin.nexusUrl = nexusUrl
  nexusReleasePlugin.userName = sonatypeUsername
  nexusReleasePlugin.password = sonatypePassword
}