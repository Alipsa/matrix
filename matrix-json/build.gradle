plugins {
  id('groovy')
  id('java-library')
  id('signing')
  id('maven-publish')
  id("se.alipsa.nexus-release-plugin") version "1.0.1"
}

group = 'se.alipsa.matrix'
version = '2.1.1-SNAPSHOT'
description = "Groovy library for importing and exporting json to and from a Matrix or Grid"

ext.nexusUrl = version.toString().endsWith("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

JavaCompile javaCompile = compileJava {
  options.release = 21
  options.deprecation = true
  options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
  options.deprecation = true
}

repositories {
  if (version.toString().endsWith('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

dependencies {

  compileOnly project(':matrix-core')
  testImplementation project(':matrix-core')
  testImplementation project(':matrix-datasets')

  compileOnly libs.groovy
  compileOnly libs.groovyJson

  testImplementation libs.groovy
  testImplementation libs.groovyJson
  testImplementation testLibs.junitJupiterApi
  testRuntimeOnly testLibs.junitJupiterEngine
  testRuntimeOnly testLibs.junitPlatformLauncher
  testImplementation('com.fasterxml.jackson.core:jackson-core:2.19.1')
  testImplementation('com.fasterxml.jackson.core:jackson-databind:2.19.1')
}

test {
  testLogging.showStandardStreams = true
  useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set('javadoc')
  from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Matrix Json'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix/matrix-json"
        properties = [
            'maven.compiler.release': "${javaCompile.options.release.get()}"
        ]
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-json/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix/matrix-json/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/matrix.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
        url = nexusUrl
      }
    }
  }
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

if (project.ext.properties.sonatypeUsername) {

  apply plugin: 'se.alipsa.nexus-release-plugin'
  nexusReleasePlugin.nexusUrl = nexusUrl
  nexusReleasePlugin.userName = sonatypeUsername
  nexusReleasePlugin.password = sonatypePassword
}