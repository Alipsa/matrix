buildscript {
  dependencies {
    classpath 'se.alipsa.groovy:nexus-release-plugin:1.0.0-SNAPSHOT'
  }
}
plugins {
  id 'groovy'
  id 'java-library'
  id 'signing'
  id 'maven-publish'
}

group 'se.alipsa.groovy'
version '1.0.0'
description = "Groovy library for importing and exporting json to and from a Matrix or Grid"

ext.nexusUrl = version.endsWith("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

task wrapper(type: Wrapper) {
  def gv = '8.10.2'
  gradleVersion = gv
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gv-bin.zip"
  validateDistributionUrl = true
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaCompile) {
  options.deprecation = true
}

tasks.withType(GroovyCompile) { task ->
  task.options.deprecation = true
}

repositories {
  if (version.contains('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

dependencies {
  def groovyVersion = '4.0.23'
  def groovy = "org.apache.groovy:groovy:$groovyVersion"

  if (version.endsWith('SNAPSHOT')) {
    compileOnly project(':matrix-core')
    testImplementation project(':matrix-core')
    testImplementation project(':matrix-datasets')
  } else {
    compileOnly('se.alipsa.groovy:matrix-core:2.0.0')
    testImplementation('se.alipsa.groovy:matrix-core:2.0.0')
    testImplementation('se.alipsa.groovy:matrix-datasets:1.0.4')
  }

  compileOnly groovy
  compileOnly "org.apache.groovy:groovy-json:$groovyVersion"

  testImplementation groovy
  testImplementation "org.apache.groovy:groovy-json:$groovyVersion"
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.2'
  testImplementation('com.fasterxml.jackson.core:jackson-core:2.18.0')
  testImplementation('com.fasterxml.jackson.core:jackson-databind:2.18.0')
}

test {
  testLogging.showStandardStreams = true
  useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set('javadoc')
  from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Groovy Matrix Json'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix/matrix-json"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-json/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix/matrix-json/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/matrix.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
        url = nexusUrl
      }
    }
  }
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

if (project.ext.properties.sonatypeUsername) {

  apply plugin: 'nexus-release-plugin'
  //apply plugin: 'se.alipsa.groovy.NexusReleasePlugin'
  nexusReleasePlugin.nexusUrl = nexusUrl
  nexusReleasePlugin.userName = sonatypeUsername
  nexusReleasePlugin.password = sonatypePassword
}