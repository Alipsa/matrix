import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  id('groovy')
  id('java-library')
  id('signing')
  id('maven-publish')
  //id("se.alipsa.nexus-release-plugin") version "1.0.1"
  id("se.alipsa.nexus-release-plugin") version '2.0.0-SNAPSHOT'
}

group = 'se.alipsa.matrix'
version = '0.0.1-SNAPSHOT'
description = 'Google Sheets import/export'

repositories {
  if (version.contains('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

JavaCompile javaCompile = compileJava {
  options.release = 21
  options.deprecation = true
  options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
  options.deprecation = true
}

dependencies {
  compileOnly libs.groovy
  compileOnly libs.groovyAnt
  compileOnly libs.groovyDoc
  compileOnly libs.groovyJson
  compileOnly project(':matrix-core')
  implementation 'com.google.auth:google-auth-library-oauth2-http:1.38.0'
  implementation 'com.google.apis:google-api-services-oauth2:v2-rev20200213-2.0.0'
  implementation 'com.google.http-client:google-http-client-gson:1.43.3'
  implementation 'com.google.api-client:google-api-client:2.6.0'
  implementation 'com.google.oauth-client:google-oauth-client-jetty:1.36.0'
  implementation 'com.google.apis:google-api-services-sheets:v4-rev20220927-2.0.0'
  // For deleting sheets
  implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
  implementation libs.log4jApi
  testImplementation project(':matrix-core')
  testImplementation testLibs.junitJupiterApi
  testRuntimeOnly testLibs.junitJupiterEngine
  testRuntimeOnly testLibs.junitPlatformLauncher
  testImplementation libs.groovy
  testImplementation libs.groovyJson
  testImplementation testLibs.log4jToSlf4j
  testImplementation testLibs.slf4jSimple
}

test {
  jvmArgs '-Xmx2g'
  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.FAILED,
        TestLogEvent.PASSED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_OUT
    exceptionFormat = TestExceptionFormat.FULL
    showExceptions = true
    showCauses = true
    showStackTraces = true
    showStandardStreams = true

    // set options for log level DEBUG and INFO
    debug {
      events TestLogEvent.STARTED,
          TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_ERROR,
          TestLogEvent.STANDARD_OUT
      exceptionFormat = TestExceptionFormat.FULL
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      def duration = result.endTime - result.startTime
      println "Duration of $desc: $duration ms"
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }

  tasks.register('antGroovydoc', DefaultTask) {
    group = 'documentation'
    description = 'Generate Groovydoc using Ant with custom config'

    doLast {
      def outputDir = layout.buildDirectory.dir("groovydocant").get().asFile

      ant.taskdef(
          name: 'groovydoc',
          classname: 'org.codehaus.groovy.ant.Groovydoc',
          classpath: sourceSets.main.compileClasspath.asPath
      )

      ant.groovydoc(
          destdir: outputDir,
          sourcepath: sourceSets.main.groovy.srcDirs.join(':'),
          packagenames: '*',
          javaVersion: 'JAVA_21',
          doctitle: "${project.name} ${project.version}",
          windowtitle: "${project.name} ${project.version}"
      ) {
        // Does not work, groovydoc does not support modules e,g,
        //  URL will become https://docs.oracle.com/en/java/javase/21/docs/api/java/net/URL.html
        //  instead of https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/net/URL.html
        //link packages: 'java.', href: 'https://docs.oracle.com/en/java/javase/21/docs/api/'
        link packages:"groovy.,org.codehaus.groovy.", href: "http://docs.groovy-lang.org/latest/html/api/"
      }
    }
  }

  tasks.register('javadocJar', Jar) {
    dependsOn tasks.named('antGroovydoc')
    archiveClassifier.set('javadoc')
    from layout.buildDirectory.dir("groovydocant")
  }

  tasks.register('sourcesJar', Jar) {
    dependsOn tasks.named('classes')
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
  }

  publishing {
    publications {
      maven(MavenPublication) {
        from components.java
        artifact(javadocJar)
        artifact(sourcesJar)
        pom {
          name = 'Matrix import/export for Google Sheets'
          description = "${project.description}"
          url = "https://github.com/Alipsa/matrix/matrix-gsheets"
          properties = [
              'maven.compiler.release': "${javaCompile.options.release.get()}"
          ]
          licenses {
            license {
              name = 'MIT License'
              url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-gsheets/master/LICENSE'
            }
          }
          developers {
            developer {
              id = 'perNyfelt'
              name = 'Per Nyfelt'
            }
          }
          scm {
            url = 'https://github.com/Alipsa/matrix/matrix-gsheets/tree/master'
            connection = 'scm:git:https://github.com/Alipsa/matrix.git'
            developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
          }
        }
      }
    }
    if (project.ext.properties.sonatypeUsername) {
      repositories {
        maven {
          credentials {
            username = sonatypeUsername
            password = sonatypePassword
          }
        }
      }
    }
  }

  signing {
    if (project.properties['signing.keyId'] != null) {
      //project.logger.lifecycle("Signing artifacts...")
      sign publishing.publications.maven
    } else {
      project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
    }
  }

  nexusReleasePlugin {
    userName = project.ext.properties.sonatypeUsername
    password = project.ext.properties.sonatypePassword
    mavenPublication = publishing.publications.maven
  }
}