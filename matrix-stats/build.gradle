import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
buildscript {
  dependencies {
    classpath 'se.alipsa.groovy:nexus-release-plugin:1.0.0-SNAPSHOT'
  }
}
plugins {
  id 'groovy'
  id 'java-library'
  //id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'signing'
  id 'maven-publish'
}

group 'se.alipsa.groovy'
version '1.0.2-SNAPSHOT'
description = "Statistical hypothesis tests based on Matrix data."

// For some reason this is required to upgrade the wrapper
// Change the version and run 'gradle wrapper' to upgrade
task wrapper(type: Wrapper) {
  def gv = '8.8'
  gradleVersion = gv //version required
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gv-bin.zip"
  validateDistributionUrl = true
}

ext.nexusUrl = version.contains("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

repositories {
  if (version.contains('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaCompile) {
  options.deprecation = true
}

tasks.withType(GroovyCompile) { task ->
  task.options.deprecation = true
}

dependencies {
  def groovyVersion = '4.0.22'
  def groovy = "org.apache.groovy:groovy:$groovyVersion"
  compileOnly groovy
  compileOnly project(':matrix-core')
  implementation 'org.apache.commons:commons-math3:3.6.1'

  testImplementation groovy
  testImplementation project(':matrix-core')
  testImplementation project(':matrix-datasets')
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
  testImplementation("se.alipsa:jfinancials:1.0-SNAPSHOT")
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.0'
}

test {
  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.FAILED,
        TestLogEvent.PASSED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_OUT
    exceptionFormat TestExceptionFormat.FULL
    showExceptions true
    showCauses true
    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events TestLogEvent.STARTED,
          TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_ERROR,
          TestLogEvent.STANDARD_OUT
      exceptionFormat TestExceptionFormat.FULL
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set('javadoc')
  from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Common datasets'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix/matrix-stats"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-stats/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix/matrix-stats/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/matrix.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
        url = nexusUrl
      }
    }
  }
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

if (project.ext.properties.sonatypeUsername) {

  apply plugin: 'nexus-release-plugin'
  //apply plugin: 'se.alipsa.groovy.NexusReleasePlugin'
  nexusReleasePlugin.nexusUrl = nexusUrl
  nexusReleasePlugin.userName = sonatypeUsername
  nexusReleasePlugin.password = sonatypePassword
}