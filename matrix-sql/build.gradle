import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
buildscript {
    dependencies {
        classpath('se.alipsa:nexus-release-plugin:1.0.1')
    }
}
plugins {
    id('groovy')
    id('java-library')
    id('signing')
    id('maven-publish')
}

group = 'se.alipsa.matrix'
version = '2.0.0-SNAPSHOT'
description = 'Groovy sql module for Matrix'

ext.nexusUrl = version.contains("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

repositories {
    if (version.contains('SNAPSHOT')) {
        mavenLocal()
    }
    mavenCentral()
    maven {
        url = uri('https://repo.gradle.org/gradle/libs-releases')
    }
}

compileJava {
    options.release = 21
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
    options.deprecation = true
}

dependencies {
    compileOnly libs.groovy
    //if (version.endsWith('SNAPSHOT')) {
        compileOnly project(':matrix-core')
        testImplementation project(':matrix-core')
        testImplementation project(':matrix-datasets')
    /*} else {
        compileOnly('se.alipsa.matrix:matrix-core:2.2.0')
        testImplementation('se.alipsa.matrix:matrix-core:2.2.0')
        testImplementation('se.alipsa.matrix:matrix-datasets:1.1.0')
    }*/
    implementation 'se.alipsa.groovy:data-utils:2.0.0-SNAPSHOT'
    //implementation 'org.gradle:gradle-tooling-api:8.12' dont think we need this
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'se.alipsa.groovy:dependency-resolver:1.0.1-SNAPSHOT'
    implementation 'se.alipsa:maven-3.9.4-utils:1.0.3'
    //implementation 'org.apache.logging.log4j:log4j-api:2.24.1'

    testImplementation libs.groovy
    testImplementation libs.groovySql

    //testImplementation('org.apache.derby:derby:10.17.1.0') // needed because the below is needed (needs the same classloader
    //testImplementation 'org.apache.derby:derbytools:10.17.1.0' // TODO this should also be loaded for embedded to work, figure out a way
    //testImplementation 'com.h2database:h2:2.2.224' // dynamically fetched so not needed
    testImplementation testLibs.junitJupiterApi
    testRuntimeOnly testLibs.junitJupiterEngine
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'
    testImplementation 'org.apache.logging.log4j:log4j-to-slf4j:2.24.3'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.24.3'
}

test {
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_OUT
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat = TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set 'javadoc'
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}


//Maven Central uploads
publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Matrix Core'
                description = "${project.description}"
                url = "https://github.com/Alipsa/matrix"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/Alipsa/matrix/main/matrix-sql/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/Alipsa/matrix/tree/main/matrix-sql'
                    connection = 'scm:git:https://github.com/Alipsa/matrix.git'
                    developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
                }
            }
        }
    }
    if (project.ext.properties.sonatypeUsername) {
        repositories {
            maven {
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
                url = nexusUrl
            }
        }
    }
    //logger.lifecycle("Log in to https://oss.sonatype.org/index.htm to release the deployment")
}

signing {
    if (project.properties['signing.keyId'] != null) {
        project.logger.lifecycle("Signing artifacts...")
        sign publishing.publications.maven
        //sign configurations.archives
    }
}

if (project.ext.properties.sonatypeUsername) {

    apply plugin: 'se.alipsa.nexus-release-plugin'
    //apply plugin: 'se.alipsa.groovy.NexusReleasePlugin'
    nexusReleasePlugin.nexusUrl = nexusUrl
    nexusReleasePlugin.userName = sonatypeUsername
    nexusReleasePlugin.password = sonatypePassword
}