import org.gradle.internal.os.OperatingSystem
plugins {
  id('groovy')
  id('java-library')
  //id 'org.openjfx.javafxplugin' version '0.0.13'
  id('maven-publish')
  id('signing')
  id("se.alipsa.nexus-release-plugin") version "1.0.1"
}

group = 'se.alipsa.matrix'
version = '0.3-SNAPSHOT'
description = "Groovy library for plotting with matrix ([][] data)"

ext.nexusUrl = version.contains("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

repositories {
  if (version.endsWith('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

compileJava {
  options.release = 21
  options.deprecation = true
  options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
  options.deprecation = true
}

// we should consider using monocle to allow this to work for back-end headless apps:
// https://wiki.openjdk.org/display/OpenJFX/Monocle
/*
this makes the javafx dependencies added to the pom
javafx {
  version = "19.0.2.1"
  modules = ['javafx.controls', 'javafx.swing']
}
 */

dependencies {
  OperatingSystem os = OperatingSystem.current()

  // check https://repo1.maven.org/maven2/org/openjfx/javafx/20/javafx-20.pom for the platform property
  def qualifier = 'unknown'
  if (os.isLinux()) {
    qualifier='linux'
  } else if (os.isWindows()) {
    qualifier = 'win'
  } else if (os.isMacOsX()) {
    qualifier = 'mac-aarch64'
  }
  def javaFxVersion = '23.0.2'
  // compile only dependencies are not included in the pom
  compileOnly libs.groovy
  //if (version.endsWith('SNAPSHOT')) {
    compileOnly project(':matrix-core')
    compileOnly project(':matrix-stats')
    testImplementation project(':matrix-core')
    testImplementation project(':matrix-stats')
    testImplementation project(':matrix-datasets')
  /*} else {
    compileOnly('se.alipsa.matrix:matrix-core:2.3.0')
    compileOnly('se.alipsa.matrix:matrix-stats:1.1.0')
    testImplementation('se.alipsa.matrix:matrix-core:2.3.0')
    testImplementation('se.alipsa.matrix:matrix-stats:1.1.0')
    testImplementation('se.alipsa.matrix:matrix-datasets:1.1.0')
  }*/
  implementation("se.alipsa.groovy:gsvg:0.1.0")

  // One of these is enough
  implementation "org.jfree:jfreechart:1.5.5"
  implementation 'org.knowm.xchart:xchart:3.8.8'

  compileOnly "org.openjfx:javafx-graphics:${javaFxVersion}:$qualifier"
  compileOnly "org.openjfx:javafx-base:${javaFxVersion}:$qualifier"
  compileOnly "org.openjfx:javafx-controls:${javaFxVersion}:$qualifier"
  compileOnly "org.openjfx:javafx-swing:${javaFxVersion}:$qualifier"

  testImplementation libs.groovy
  //testImplementation "org.testfx:openjfx-monocle:jdk-11+26"

  testImplementation "org.openjfx:javafx-graphics:${javaFxVersion}:$qualifier"
  testImplementation "org.openjfx:javafx-base:${javaFxVersion}:$qualifier"
  testImplementation "org.openjfx:javafx-controls:${javaFxVersion}:$qualifier"
  testImplementation "org.openjfx:javafx-swing:${javaFxVersion}:$qualifier"
  testImplementation testLibs.junitJupiter
  testRuntimeOnly testLibs.junitJupiterEngine
  testRuntimeOnly testLibs.junitPlatformLauncher
  testImplementation libs.groovySql
  //testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
}

test {
  testLogging.showStandardStreams = true
  // run using gradle -Pheadless=true test
  jvmArgs "-Dheadless=${project.hasProperty('headless') ? project.headless : false}"
  useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set 'javadoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set 'sources'
  from sourceSets.main.allSource
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Groovy Matrix Plotting'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix/matrix-charts"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-charts/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix/matrix-charts/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/matrix.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
        url = nexusUrl
      }
    }
  }
}


signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

if (project.ext.properties.sonatypeUsername) {
  apply plugin: 'se.alipsa.nexus-release-plugin'
  //apply plugin: 'se.alipsa.groovy.NexusReleasePlugin'
  nexusReleasePlugin.nexusUrl = nexusUrl
  nexusReleasePlugin.userName = sonatypeUsername
  nexusReleasePlugin.password = sonatypePassword
}