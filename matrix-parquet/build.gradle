plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    //id("se.alipsa.nexus-release-plugin") version "1.0.1"
    id("se.alipsa.nexus-release-plugin") version '2.0.0'
}

group = 'se.alipsa.matrix'
version = '0.3.1-SNAPSHOT'
description = "Groovy library for importing and exporting parquet files to and from a Matrix"

ext.nexusUrl = version.toString().endsWith("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"


JavaCompile javaCompile = compileJava {
    options.release = 21
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
    options.deprecation = true
}

repositories {
    mavenCentral()
    if (version.endsWith('SNAPSHOT')) {
        mavenLocal()
    }
}

dependencies {
    compileOnly libs.groovy
    //if (version.endsWith('SNAPSHOT')) {
        compileOnly project(':matrix-core')
        testImplementation project(':matrix-core')
        testImplementation project(':matrix-datasets')
    /*} else {
        compileOnly('se.alipsa.matrix:matrix-core:2.2.0')
        testImplementation('se.alipsa.matrix:matrix-core:2.2.0')
        testImplementation('se.alipsa.matrix:matrix-datasets:1.1.0')
    }*/
    implementation 'org.apache.ivy:ivy:2.5.3'
    //implementation 'com.jerolba:carpet-record:0.4.0' //must be loaded by Grab for now
    implementation 'org.apache.parquet:parquet-column:1.16.0'
    implementation 'org.apache.parquet:parquet-hadoop:1.16.0'
    implementation('org.apache.hadoop:hadoop-common:3.4.2') {
        //exclude group: 'org.slf4j'         // optional: avoid conflicts
        //exclude group: 'com.google.guava'  // optional: prevent old guava
        //exclude group: 'org.apache.hadoop.thirdparty'
        exclude group: 'org.apache.zookeeper'
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'io.netty'                   // âœ… Netty
        exclude group: 'com.squareup.okhttp3'       // optional, sometimes pulled transitively
    }
    implementation 'org.apache.hadoop:hadoop-mapreduce-client-core:3.4.2'
    testImplementation testLibs.junitJupiterApi
    testRuntimeOnly testLibs.junitJupiterEngine
    testRuntimeOnly testLibs.junitPlatformLauncher
    testImplementation libs.groovy
    testImplementation testLibs.slf4jSimple
    testImplementation testLibs.log4jToSlf4j
}

test {
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('javadoc')
    from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Matrix Parquet'
                description = "${project.description}"
                url = "https://github.com/Alipsa/matrix/matrix-parquet"
                properties = [
                    'maven.compiler.release': "${javaCompile.options.release.get()}"
                ]
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-parquet/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/Alipsa/matrix/matrix-parquet/tree/master'
                    connection = 'scm:git:https://github.com/Alipsa/matrix.git'
                    developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
                }
            }
        }
    }
    if (project.ext.properties.sonatypeUsername) {
        repositories {
            maven {
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
                url = nexusUrl
            }
        }
    }
}

signing {
    if (project.properties['signing.keyId'] != null) {
        //project.logger.lifecycle("Signing artifacts...")
        sign publishing.publications.maven
    } else {
        project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
    }
}

nexusReleasePlugin {
    userName = project.ext.properties.sonatypeUsername
    password = project.ext.properties.sonatypePassword
    mavenPublication = publishing.publications.maven
}