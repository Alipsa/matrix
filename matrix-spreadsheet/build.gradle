import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id('groovy')
    id('java-library')
    id('signing')
    id('maven-publish')
    id("se.alipsa.nexus-release-plugin") version "1.0.1"
}

group = 'se.alipsa.matrix'
version = '2.1.0-SNAPSHOT'
description = 'Groovy spreadsheet import/export'

ext.nexusUrl = version.contains("SNAPSHOT")
    ? "https://oss.sonatype.org/content/repositories/snapshots/"
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

repositories {
    if (version.contains('SNAPSHOT')) {
        mavenLocal()
    }
    mavenCentral()
}

compileJava {
    options.release = 21
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
    options.deprecation = true
}

dependencies {
    compileOnly libs.groovy

    compileOnly project(':matrix-core')
    testImplementation project(':matrix-core')
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'

    implementation('org.apache.poi:poi:5.4.0')
    implementation('org.apache.poi:poi-ooxml:5.4.0')
    // https://github.com/dhatim/fastexcel
    implementation('org.dhatim:fastexcel:0.18.4')
    implementation('org.dhatim:fastexcel-reader:0.18.4')
    implementation 'com.github.miachm.sods:SODS:1.6.7'


    testImplementation testLibs.junitJupiterApi
    testRuntimeOnly testLibs.junitJupiterEngine
    testRuntimeOnly testLibs.junitPlatformLauncher
    testImplementation libs.groovy
}

test {
    jvmArgs '-Xmx2g'
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_OUT
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
        showStandardStreams = true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat = TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            def duration = result.endTime - result.startTime
            println "Duration of $desc: $duration ms"
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('javadoc')
    from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Matrix Spreadsheet import/export'
                description = "${project.description}"
                url = "https://github.com/Alipsa/matrix/matrix-spreadsheet"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/Alipsa/matrix/matrix-spreadsheet/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/Alipsa/matrix/matrix-spreadsheet/tree/master'
                    connection = 'scm:git:https://github.com/Alipsa/matrix.git'
                    developerConnection = 'scm:git:https://github.com/Alipsa/matrix.git'
                }
            }
        }
    }
    if (project.ext.properties.sonatypeUsername) {
        repositories {
            maven {
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
                url = nexusUrl
            }
        }
    }
}

signing {
    if (project.properties['signing.keyId'] != null) {
        project.logger.lifecycle("Signing artifacts...")
        sign publishing.publications.maven
    } else {
        project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
    }
}

if (project.ext.properties.sonatypeUsername) {
    apply plugin: 'se.alipsa.nexus-release-plugin'
    nexusReleasePlugin.nexusUrl = nexusUrl
    nexusReleasePlugin.userName = sonatypeUsername
    nexusReleasePlugin.password = sonatypePassword
}
